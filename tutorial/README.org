#+TITLE: Granking Wikipedia

*Note*: the code in this document requires grank to work.

Let's see how to obtain useful information from a Wikipedia
link.

Our input is a ~link-info~ prepared by ~grank~, our output
should be another ~link-info~ structure, populated with the
correct title and synopsis.

Wikipedia has an [[https://www.mediawiki.org/wiki/API:Main_page][API]] we can use to obtain extended
information about the page.

Our plan of attack:

- Declare the template to construct an API endpoint for a
  Wiki page
- Identify the data required to complete the template
- Obtain the data required by the template from the URL
- Construct the endpoint
- Retrieve the associated JSON document (nicely!)
- Parse the document
- Extract the title and extract
- Make a link-info struct with title and extract

Looking at the API documentation, we can construct the
following template:

#+begin_src elisp
(defvar grank--wk-query-template
  "https://%s/w/api.php?format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=%s")
#+end_src

The first ~%s~ if for the host, the second for the page
title. On Wikipedia, the host depends on the language of the
page and a mismatch will not return the information we are
looking for.

Here's a test vector with English and Japanese
versions of a page:

#+begin_src elisp
(defvar --test-url-wk-per
  `((en . ,(init-grank-link-info :url "https://en.wikipedia.org/wiki/Persimmon"))
    (jp . ,(init-grank-link-info :url "https://ja.wikipedia.org/wiki/%E3%82%AB%E3%82%AD%E3%83%8E%E3%82%AD#%E6%9F%BF%E3%81%AE%E5%AE%9F"))))
#+end_src

Yummy!

Now, to go from link-info to the api endpoint, we need to
extract the host and title and plug those in our
template. Extracting is easy, the hostname is a field in the
parsed url struct and the title is matched by a regular
expression group:

#+begin_src elisp
(defun grank--wk-get-host-and-title (link-info)
  "Get Wikipedia host and title from LINK-INFO.
Returns nil if we cannot obtain either."
  (let* ((parsed-url (grank-link-info-parsed-url link-info))
         (host (url-host parsed-url))
         (path (url-filename parsed-url))
         (title (save-match-data
                  (and (string-match "/wiki/\\(.*\\)/?" path)
                       (match-string 1 path)))))
    (if (and host title)
        (cons host title)
      nil)))
#+end_src

Using this on the Japanese URL:

#+begin_src elisp
(grank--wk-get-host-and-title
 (alist-get 'jp --test-url-wk-per))
#+end_src

Gives us:

#+RESULTS:
: (ja.wikipedia.org . %E3%82%AB%E3%82%AD%E3%83%8E%E3%82%AD)

Plugging is also simple:

#+begin_src elisp
(defun grank--wk-query-with-title (host-and-title)
  (pcase-let ((`(,host . ,title) host-and-title))
    (format grank--wk-query-template host title)))
#+end_src

Again with our Japanese URL:

#+begin_src elisp
(grank--wk-query-with-title
 (grank--wk-get-host-and-title
  (alist-get 'jp --test-url-wk-per)))
#+end_src

Gives us the URL to call to obtain information about this
page:

#+RESULTS:
: https://ja.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=%E3%82%AB%E3%82%AD%E3%83%8E%E3%82%AD

Paste this URL in a browser and obtain JSON:

#+begin_example
{
  batchcomplete: "",
  query: {
    pages: {
      51229: {
        pageid: 51229,
        ns: 0,
        title: "カキノキ",
        extract: "カキノキ（柿の木、学名：Diospyros kaki）は、カキノキ科 (Ebenaceae) カキノキ属 の1種の落葉樹である。東アジア原産 の同地域固有種。日本や韓国、中国に多くの在来品種があり、特に中国・長江流域に自生している。
        熟した果実（柿）は食用とされ、日本では果樹として、北海道以外で広く栽培されている。果実はビタミン類や食物繊維を多く含むことから、現代では東アジア以外の地域でも栽培・消費されている。ヨーロッパ産（2018年時点で54万トン）ではスペインが9割を占め、中国に次ぐ世界第2位の生産国である。
        幹は家具材として用いられる。葉は茶の代わり（茶外茶）として加工され飲まれることがある。果実はタンニンを多く含み、柿渋は防腐剤として用いられる。現在では世界中の温暖な地域（渋柿は寒冷地）で栽培されている。"
      }
    }
  }
}
#+end_example

As stated above, a mismatch between host and title will not
work, so a =GET= with such a discrepancy:

#+begin_example
https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&titles=%E3%82%AB%E3%82%AD%E3%83%8E%E3%82%AD
#+end_example

Will return:

#+begin_example
{
  "batchcomplete":"",
  "query":{
    "pages":{
      "-1":{
        "ns":0,
        "title":"\u30ab\u30ad\u30ce\u30ad",
        "missing":""
      }
    }
  }
}
#+end_example

This kinda works. Remains to:
- cleanup argument names (parsed-json isn't what we want)
- a lot of them can return null, but wouldn't accept null as
  input. They need to be chained as a list, and if one
  returns nil, abort chain and return nil. *NOT* the option
  /monad/ but a little similar in spirit.
- we set the url-user-agent back to default. Wrong! It
  should be back to whatever it was!
- A single page object isn't a sufficient success criteria:
  the k must != -1.

Not too far off so, carry on!

#+begin_src elisp
(defun grank--get-http-response (url)
  "Get the response from an HTTP GET on URL.
This is the entire response, headers included.
If an error occurs, return nil.
The `url-user-agent' is temporarily modified to grank's
repo and restored to its previous value."
  (condition-case e
      (let* ((ua url-user-agent)
             (response)
             (res-buffer (url-retrieve-synchronously url)))
        (setq url-user-agent "https://github.com/grenle/grank")
        (with-current-buffer res-buffer
          (setq response (buffer-string)))
        (kill-buffer res-buffer)
        (setq url-user-agent ua)
        response)
    (error
     (progn
       (message "%s" e)
       nil))))

(defun grank--excise-message-body (http-message)
  "Given an HTTP message, return its body.
If no body exists, the empty string is returned."
  (let ((start-at (string-match "\n\n" http-message)))
    (if start-at
        (substring http-message (+ start-at 2))
      "")))

(grank--excise-message-body (grank--get-http-response "http://localhost:4321"))

;;; wget -q --save-headers --output-document - <URL> > <FILENAME>

(defvar json-wk-pers-doc
  (json-parse-string
   (with-temp-buffer
     (insert-file-contents "~/elisp/grank/tutorial/data/wk-jp-persimmon")
     (grank--excise-message-body (buffer-string)))))

(defun grank--wk-json-nav-query (parsed-json)
  "Get value associated w. query in hashtable PARSED-JSON"
  (gethash "query" parsed-json))

(defun grank--wk-json-nav-pages (parsed-json)
  "Get value associated w. pages in hashtable PARSED-JSON."
  (gethash "pages" parsed-json))

(defun grank--hash-get-keys (hash-table)
  "List the keys in HASH-TABLE"
  (let ((keys))
    (maphash
     (lambda (k v) (setq keys (cons k keys)))
     hash-table)
    keys))

(defun grank--wk-json-page-or-nil (parsed-json)
  "Return the single page in PARSED-JSON.
If there are zero or 2+ pages, return nil."
  (let ((keys (grank--hash-get-keys parsed-json)))
    (if (= 1 (length keys))
        (gethash (car keys) parsed-json)
      nil)))

(defun grank--wk-json-page-get-title (parsed-json)
  "Get the value associated with title in hashtable PARSED-JSON."
  (gethash "title" parsed-json))

(defun grank--wk-json-page-get-synopsis (parsed-json)
  "Get the value associated with extract in hashtable PARSED-JSON."
  (gethash "extract" parsed-json))

(grank--wk-json-page-get-synopsis
 (grank--wk-json-page-or-nil
  (grank--wk-json-nav-pages
   (grank--wk-json-nav-query json-wk-pers-doc))))
#+end_src
