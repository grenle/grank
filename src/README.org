#+AUTHOR: Gregory Houldsworth
#+TITLE: grank

* Grank

Mode aware URL yank.

* Naming scheme

~<package-name>-*<function-name>~
(as in ~(mypackage-*my-function)~)
denotes a version of the function called by a "cleaner" star
free version.

The star version might be needed to pass the seed of a
recursive function, replace *'s nil output with a default or
pass an explicit parameter to the star version while the
star free takes this value from the environment.

* Requirements

The 'url and 'cl-lib packages are required, they come with
the Emacs distribution.

#+begin_src elisp
(require 'url)
(require 'cl-lib)
#+end_src

* Algorithms + Data Structures

** Dispatch on URL /sort/ and mode

Extracting information from a URL depends on the /sort/ of
URL and the format of the link text depends on the mode of
the buffer we are pasting to.

This suggests two sorts of specialised procedures:
- one for extracting information from a specific /sort/ of
  link.
- Another, called with the extracted information
  to produce text according to the major mode.

And two companion structures, for associating each procedure
with its target URL /sort/ or mode. =alist='s work well here:

#+begin_src elisp
(defvar grank-url-dispatch-table nil)
(defvar grank-mode-dispatch-table nil)
#+end_src

The selection of the mode handler is simple: select from the
alist, use default otherwise. We will do this directly when
we are ready to format the information derived from the
provided URL.

The selection of the url handler works differently: each
entry in the list is a pair with a regexp denoting the
/class/ of URLs we wish to handle and the CDR is the handler
procedure.

Our internal procedure walks through the provided handlers
alist and returns the ~CDR~ of the first match or ~nil~.

#+begin_src elisp
(defun grank--*get-url-handler (handlers url)
  "Find the handler for URL or nil if none found."
  (cl-loop for pair in handlers
           when (string-match (car pair) url)
           return (cdr pair)))
#+end_src

The starless version gets handlers from the global variable
and returns a specialised procedure or the globally defined
default handler.

#+begin_src elisp
(defun grank--get-url-handler (url)
  (or
   (grank--*get-url-handler grank-url-dispatch-table url)
   #'grank--default-url-handler))
#+end_src

** Link Information

We also need a structure to carry the extracted link
info. We use cl's struct with two constructors.

This struct has no default and two custom constructors:

- ~init-~ takes a url, populates the parsed-url and title slots
- ~make-~ takes all parameters 

#+begin_src elisp
(cl-defstruct
    (grank-link-info
     (:constructor nil)
     (:constructor
      init-grank-link-info
      (&key (url)
       &aux (parsed-url (url-generic-parse-url url))
            (title url)))
     (:constructor
      make-grank-link-info
      (&key (url nil)
            (title nil)
            (synopsis nil))
      (&aux (parsed-url (url-generic-parse-url url)))))
  url parsed-url title synopsis)
#+end_src

** Default Handlers

We can now write our two default handlers.

For ~grank--default-url-handler~ with the addition of title
automatic init from grank-link-info init constructor, we no
longer need much of this. It could be the identity function.

#+begin_src elisp
(defun grank--default-url-handler (link-info)
  "Create basic link-info from link-info."
  (let ((link-info-url (grank-link-info-url link-info)))
    (init-grank-link-info
     :url link-info-url)))
#+end_src

For our mode handler, we have a stared procedure taking a
mode, a link-info struct and a style. Being a default
handler, the style argument is ignored but structurally
present to demonstrate how to build your own special
handler.

#+begin_src elisp
(defun grank--*default-mode-handler (mode link-info &optional style)
  "Create basic string from LINK-INFO depending on MODE.
The STYLE parameter changes the output. Unused as of now."
  (let ((url (grank-link-info-url link-info))
        (title (grank-link-info-title link-info))
        (synopsis (grank-link-info-synopsis link-info)))
    (pcase mode
      ('org-mode
       (pcase style
         (_ (format "[[%s][%s]]" url title))))
      ('html-mode
       (pcase style
         (_ (format "<a href=\"%s\">%s</a>" url title))))
      ('markdown-mode
       (pcase style
         (_ (format "[%s](%s)" url title))))
      (_ url))))
#+end_src

The starless version takes the mode from the active buffer.

#+begin_src elisp
(defun grank--default-mode-handler (link-info &optional style)
  "Create basic string from LINK-INFO.
The STYLE parameter changes the output. Unused as of now."
  (grank--*default-mode-handler major-mode link-info style))
#+end_src

** Transform and Roll Out!

Another pair of procedure will transform a URL into a
link-info structure and a link-info structure into a string:

#+begin_src elisp
(defun grank--obtain-info (url)
  "Calls the appropriate url-handler on URL."
  (let* ((link-info (init-grank-link-info :url url))
         (parsed-url (grank-link-info-parsed-url link-info))
         (host (url-host parsed-url))
         (handler
          (grank--get-url-handler url)))
    (funcall handler link-info)))

(defun grank--process-info (link-info &optional style)
  "Format LINK-INFO struct for the current major mode.
If the major mode has en entry in the alist
`grunk-mode-dispatch-table', the formating is done by the
associated procedure falling back on
`grank--default-mode-handler' otherwise".
  (let ((handler
         (alist-get
          major-mode
          grunk-mode-dispatch-table
          #'grank--default-mode-handler)))
    (funcall handler link-info)))
#+end_src

We can now create the pipeline describe above,
~URL â†’ pretty link~:

#+begin_src elisp
(defun grank-url-to-link (url)
  "Create a mode aware link for URL.
Will use the current major mode"
  (grank--process-info
   (grank--obtain-info url)))
#+end_src

Almost, but not quite what we wanted. How do we pretty-paste
that URL we just copied from the browser? Like this:

#+begin_src elisp
(defun grank ()
  (interactive)
  (let ((url (current-kill 0 t)))
    (insert (grank-url-to-link url))))
#+end_src

* Epilogue

#+begin_src elisp
(provide 'grank)
;;; grank.el ends here
#+end_src


* Mistakes made, lessons learned and questions

| Error                                                                               | Lesson                                                                                                 |
|-------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| <26>                                                                                | <26>                                                                                                   |
| Writing URL % encoding handler ignoring the functionality already provided in emacs | RTM? Get familiar with tools, librairies, etc...                                                       |
|-------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| Spending time on packaging guidelines                                               | Not until package useful to me 1+                                                                      |
|-------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| Specialising URL info gathering on hostname equality or tree rather than regexp     | Express does it right? What are pro/cons, alternatives?                                                |
|-------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| Creating procedures when logic and order procedures do                              | N-ary comparisons (~<~ and friends), ~or~, ~and~ can be used to easily capture /number between/ and /value of exp or default if value nil/ ideas. How well does this translate in other languages facilities *and* culture?    |
|-------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
